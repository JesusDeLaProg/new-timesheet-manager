edition = "2023";

package timesheet_manager;

import "buf/validate/validate.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/go_features.proto";
import "google/type/date.proto";
import "google/type/money.proto";

option features.(pb.go).api_level = API_OPAQUE;

message Distance {
    enum Unit {
        UNIT_UNSPECIFIED = 0;
        UNIT_KILOMETER = 1;
        UNIT_MILE = 2;
    }

    Unit unit = 1 [(buf.validate.field).required = true, (buf.validate.field).enum.defined_only = true];
    int64 units = 2;
    int32 nanos = 3;
}

message Employee {
    message Role {
        string title = 1 [
            (buf.validate.field).required = true,
            (buf.validate.field).string.min_len = 3
        ];
        google.type.Date start = 2 [
            (buf.validate.field).required = true,
            (buf.validate.field).cel = {
                id: "start.isvalid",
                message: "start should be a valid date"
                expression: "this.day > 0 && this.month > 0 && this.year > 0"
            }
        ];
        google.type.Date end = 3 [
            (buf.validate.field).required = true,
            (buf.validate.field).cel = {
                id: "end.isvalid",
                message: "end should be a valid date"
                expression: "this.day > 0 && this.month > 0 && this.year > 0"
            }
        ];
        google.type.Money hourly_rate = 4 [
            (buf.validate.field).required = true,
            (buf.validate.field).cel = {
                id: "hourly_rate.hascurrencycode",
                message: "hourly_rate should have a currency code"
                expression: "this.currency_code != ''"
            },
            (buf.validate.field).cel = {
                id: "hourly_rate.ispositive",
                message: "hourly_rate should be a positive amount"
                expression: "this.units >= 0 && this.nanos >= 0 && (this.units + this.nanos) > 0"
            }
        ];
    }

    bytes id = 1;
    bytes owning_user_id = 2 [(buf.validate.field).required = true];
    string first_name = 3 [(buf.validate.field).required = true, (buf.validate.field).string.min_len = 3];
    string last_name = 4 [(buf.validate.field).required = true, (buf.validate.field).string.min_len = 3];
    repeated Role roles = 5 [
        (buf.validate.field).cel = {
            id: "roles.hasoneopenstart",
            message: "roles should contain strictly one without a start date"
            expression: "size(this.filter(r, r.start == null)) == 1"
        },
        (buf.validate.field).cel = {
            id: "roles.hasoneopenend",
            message: "roles should contain strictly one without an end date"
            expression: "size(this.filter(r, r.end == null)) == 1"
        }
    ];
}

message User {
    enum Role {
        ROLE_UNSPECIFIED = 0;
        ROLE_USER = 1;
        ROLE_SUPER_USER = 2;
        ROLE_ADMIN = 3;
        ROLE_SUPER_ADMIN = 4;
    }

    bytes id = 1;
    string username = 2 [(buf.validate.field).required = true, (buf.validate.field).string.min_len = 3];
    Role role = 3 [(buf.validate.field).required = true, (buf.validate.field).enum.defined_only = true];
    string email = 4 [(buf.validate.field).required = true, (buf.validate.field).string.email = true];
    bytes password = 5 [(buf.validate.field).required = true, (buf.validate.field).bytes.min_len = 1];
}

message Activity {
    bytes id = 1;
    string code = 2 [(buf.validate.field).required = true, (buf.validate.field).string.len = 2];
    string name = 3 [(buf.validate.field).required = true, (buf.validate.field).string.min_len = 2];
}

message Phase {
    bytes id = 1;
    string code = 2 [(buf.validate.field).required = true, (buf.validate.field).string.len = 2];
    string name = 3 [(buf.validate.field).required = true, (buf.validate.field).string.min_len = 2];
    repeated bytes activities_in_phase = 4 [
        (buf.validate.field).required = true,
        (buf.validate.field).repeated.min_items = 1,
        (buf.validate.field).repeated.unique = true
    ];
}

message Client {
    bytes id = 1;
    string name = 2 [(buf.validate.field).required = true, (buf.validate.field).string.min_len = 1];
    Project.Type default_project_type = 3 [(buf.validate.field).required = true, (buf.validate.field).enum.defined_only = true];
}

message Project {
    enum Type {
        TYPE_UNSPECIFIED = 0;
        TYPE_PRIVATE = 1;
        TYPE_PUBLIC = 2;
    }
    bytes id = 1;
    string code = 2 [(buf.validate.field).required = true, (buf.validate.field).string.pattern = "\\d{2,4}-\\d+"];
    string name = 3 [(buf.validate.field).required = true, (buf.validate.field).string.min_len = 1];
    bytes client_id = 4 [(buf.validate.field).required = true, (buf.validate.field).bytes.min_len = 1];
    Type type = 5 [(buf.validate.field).required = true, (buf.validate.field).enum.defined_only = true];
    bool active = 6 [(buf.validate.field).required = true];
}

message Expense {
    string description = 1 [(buf.validate.field).required = true, (buf.validate.field).string.min_len = 1];
    google.type.Money amount = 2 [
        (buf.validate.field).required = true,
        (buf.validate.field).cel = {
            id: "hourly_rate.hascurrencycode",
            message: "hourly_rate should have a currency code"
            expression: "this.currency_code != ''"
        },
        (buf.validate.field).cel = {
            id: "amount.ispositive",
            message: "amount should be a positive amount"
            expression: "this.units >= 0 && this.nanos >= 0 && (this.units + this.nanos) > 0"
        }
    ];
}

message Travel {
    bytes project_id = 1 [(buf.validate.field).required = true, (buf.validate.field).bytes.min_len = 1];
    google.type.Date date = 2 [
        (buf.validate.field).required = true,
        (buf.validate.field).cel = {
            id: "date.isvalid",
            message: "date should be a valid date"
            expression: "this.day > 0 && this.month > 0 && this.year > 0"
        }
    ];
    string from = 3 [(buf.validate.field).required = true, (buf.validate.field).string.min_len = 1];
    string to = 4 [(buf.validate.field).required = true, (buf.validate.field).string.min_len = 1];
    Distance distance = 5 [
        (buf.validate.field).required = true,
        (buf.validate.field).cel = {
            id: "distance.ispositive",
            message: "distance should be a positive distance",
            expression: "this.units >= 0 && this.nanos >= 0 && (this.units + this.nanos) > 0"
        }
    ];
    repeated Expense expenses = 6;
}

message TimesheetEntry {
    google.type.Date date = 1 [
        (buf.validate.field).required = true,
        (buf.validate.field).cel = {
            id: "date.isvalid",
            message: "date should be a valid date"
            expression: "this.day > 0 && this.month > 0 && this.year > 0"
        }
    ];
    google.protobuf.Duration time = 2 [(buf.validate.field).duration.gt = { seconds: 0 }];
}

message TimesheetLine {
    bytes project_id = 1 [(buf.validate.field).required = true, (buf.validate.field).bytes.min_len = 1];
    bytes phase_id = 2 [(buf.validate.field).required = true, (buf.validate.field).bytes.min_len = 1];
    bytes activity_id = 3 [(buf.validate.field).required = true, (buf.validate.field).bytes.min_len = 1];
    string misc = 4;
    repeated TimesheetEntry entries = 5 [
        (buf.validate.field).required = true,
        (buf.validate.field).repeated.min_items = 14,
        (buf.validate.field).repeated.max_items = 14
    ];
}

message Timesheet {
    bytes id = 1;
    bytes employee_id = 2 [(buf.validate.field).required = true, (buf.validate.field).bytes.min_len = 1];
    google.type.Date begin = 3 [
        (buf.validate.field).required = true,
        (buf.validate.field).cel = {
            id: "begin.isvalid",
            message: "begin should be a valid date"
            expression: "this.day > 0 && this.month > 0 && this.year > 0"
        }
    ];
    google.type.Date end = 4 [
        (buf.validate.field).required = true,
        (buf.validate.field).cel = {
            id: "end.isvalid",
            message: "end should be a valid date"
            expression: "this.day > 0 && this.month > 0 && this.year > 0"
        }
    ];
    repeated TimesheetLine lines = 5 [(buf.validate.field).required = true, (buf.validate.field).repeated.min_items = 1];
    repeated Travel travels = 6;
}

message FetchOptions {
    message Sort {
        enum Direction {
            DIR_ASC = 0;
            DIR_DESC = 1;
        }
        string field = 1;
        Direction direction = 2;
    }
    Sort sort = 1;
    uint64 skip = 2;
    uint64 limit = 3;
}

message ValidationError {
    string path = 1;
    string error = 2;
}

message FetchActivitiesRequest {
    repeated bytes ids = 1;
    FetchOptions options = 2;
}
message FetchActivitiesResponse {
    repeated Activity activities = 1;
}

message CreateActivityRequest {
    Activity activity = 1;
}
message CreateActivityResponse {}

message UpdateActivityRequest {
    Activity activity = 1;
}
message UpdateActivityResponse {}

message DeleteActivityRequest {
    bytes id = 1;
}
message DeleteActivityResponse {}

message ValidateActivityRequest {
    Activity activity = 1;
}
message ValidateActivityResponse {
    repeated ValidationError errors = 1;
}

service ActivityService {
    rpc Fetch(FetchActivitiesRequest) returns (FetchActivitiesResponse) {}
    rpc Create(CreateActivityRequest) returns (CreateActivityResponse) {}
    rpc Update(UpdateActivityRequest) returns (UpdateActivityResponse) {}
    rpc Delete(DeleteActivityRequest) returns (DeleteActivityResponse) {}
    rpc Validate(ValidateActivityRequest) returns (ValidateActivityResponse) {}
}

message FetchPhasesRequest {
    repeated bytes ids = 1;
    FetchOptions options = 2;
}
message FetchPhasesResponse {
    repeated Phase phases = 1;
}

message CreatePhaseRequest {
    Phase phase = 1;
}
message CreatePhaseResponse {}

message UpdatePhaseRequest {
    Phase phase = 1;
}
message UpdatePhaseResponse {}

message DeletePhaseRequest {
    bytes id = 1;
}
message DeletePhaseResponse {}

message ValidatePhaseRequest {
    Phase phase = 1;
}
message ValidatePhaseResponse {
    repeated ValidationError errors = 1;
}

service PhaseService {
    rpc Fetch(FetchPhasesRequest) returns (FetchPhasesResponse) {}
    rpc Create(CreatePhaseRequest) returns (CreatePhaseResponse) {}
    rpc Update(UpdatePhaseRequest) returns (UpdatePhaseResponse) {}
    rpc Delete(DeletePhaseRequest) returns (DeletePhaseResponse) {}
    rpc Validate(ValidatePhaseRequest) returns (ValidatePhaseResponse) {}
}

message FetchClientsRequest {
    repeated bytes ids = 1;
    FetchOptions options = 2;
}
message FetchClientsResponse {
    repeated Client clients = 1;
}

message CreateClientRequest {
    Client client = 1;
}
message CreateClientResponse {}

message UpdateClientRequest {
    Client client = 1;
}
message UpdateClientResponse {}

message DeleteClientRequest {
    bytes id = 1;
}
message DeleteClientResponse {}

message ValidateClientRequest {
    Client client = 1;
}
message ValidateClientResponse {
    repeated ValidationError errors = 1;
}

service ClientService {
    rpc Fetch(FetchClientsRequest) returns (FetchClientsResponse) {}
    rpc Create(CreateClientRequest) returns (CreateClientResponse) {}
    rpc Update(UpdateClientRequest) returns (UpdateClientResponse) {}
    rpc Delete(DeleteClientRequest) returns (DeleteClientResponse) {}
    rpc Validate(ValidateClientRequest) returns (ValidateClientResponse) {}
}

message FetchProjectsRequest {
    repeated bytes ids = 1;
    FetchOptions options = 2;
}
message FetchProjectsResponse {
    repeated Project projects = 1;
}

message CreateProjectRequest {
    Project project = 1;
}
message CreateProjectResponse {}

message UpdateProjectRequest {
    Project project = 1;
}
message UpdateProjectResponse {}

message DeleteProjectRequest {
    bytes id = 1;
}
message DeleteProjectResponse {}

message ValidateProjectRequest {
    Project project = 1;
}
message ValidateProjectResponse {
    repeated ValidationError errors = 1;
}

service ProjectService {
    rpc Fetch(FetchProjectsRequest) returns (FetchProjectsResponse) {}
    rpc Create(CreateProjectRequest) returns (CreateProjectResponse) {}
    rpc Update(UpdateProjectRequest) returns (UpdateProjectResponse) {}
    rpc Delete(DeleteProjectRequest) returns (DeleteProjectResponse) {}
    rpc Validate(ValidateProjectRequest) returns (ValidateProjectResponse) {}
}

message FetchTimesheetsRequest {
    repeated bytes ids = 1;
    FetchOptions options = 2;
}
message FetchTimesheetsResponse {
    repeated Timesheet timesheets = 1;
}

message CreateTimesheetRequest {
    Timesheet timesheet = 1;
}
message CreateTimesheetResponse {}

message UpdateTimesheetRequest {
    Timesheet timesheet = 1;
}
message UpdateTimesheetResponse {}

message DeleteTimesheetRequest {
    bytes id = 1;
}
message DeleteTimesheetResponse {}

message ValidateTimesheetRequest {
    Timesheet timesheet = 1;
}
message ValidateTimesheetResponse {
    repeated ValidationError errors = 1;
}

service TimesheetService {
    rpc Fetch(FetchTimesheetsRequest) returns (FetchTimesheetsResponse) {}
    rpc Create(CreateTimesheetRequest) returns (CreateTimesheetResponse) {}
    rpc Update(UpdateTimesheetRequest) returns (UpdateTimesheetResponse) {}
    rpc Delete(DeleteTimesheetRequest) returns (DeleteTimesheetResponse) {}
    rpc Validate(ValidateTimesheetRequest) returns (ValidateTimesheetResponse) {}
}

message FetchEmployeesRequest {
    repeated bytes ids = 1;
    FetchOptions options = 2;
}
message FetchEmployeesResponse {
    repeated Employee employees = 1;
}

message CreateEmployeeRequest {
    Employee employee = 1;
}
message CreateEmployeeResponse {}

message UpdateEmployeeRequest {
    Employee employee = 1;
}
message UpdateEmployeeResponse {}

message DeleteEmployeeRequest {
    bytes id = 1;
}
message DeleteEmployeeResponse {}

message ValidateEmployeeRequest {
    Employee employee = 1;
}
message ValidateEmployeeResponse {
    repeated ValidationError errors = 1;
}

service EmployeeService {
    rpc Fetch(FetchEmployeesRequest) returns (FetchEmployeesResponse) {}
    rpc Create(CreateEmployeeRequest) returns (CreateEmployeeResponse) {}
    rpc Update(UpdateEmployeeRequest) returns (UpdateEmployeeResponse) {}
    rpc Delete(DeleteEmployeeRequest) returns (DeleteEmployeeResponse) {}
    rpc Validate(ValidateEmployeeRequest) returns (ValidateEmployeeResponse) {}
}

message FetchUsersRequest {
    repeated bytes ids = 1;
    FetchOptions options = 2;
}
message FetchUsersResponse {
    repeated User users = 1;
}

message CreateUserRequest {
    User user = 1;
}
message CreateUserResponse {}

message UpdateUserRequest {
    User user = 1;
}
message UpdateUserResponse {}

message DeleteUserRequest {
    bytes id = 1;
}
message DeleteUserResponse {}

message ValidateUserRequest {
    User user = 1;
}
message ValidateUserResponse {
    repeated ValidationError errors = 1;
}

message FetchUsernamesRequest {}
message FetchUsernamesResponse {
    message UserIdAndName {
        bytes user_id = 1;
        bytes username = 2;
    }
    repeated UserIdAndName usernames = 1;
}

service UserService {
    rpc Fetch(FetchUsersRequest) returns (FetchUsersResponse) {}
    rpc Create(CreateUserRequest) returns (CreateUserResponse) {}
    rpc Update(UpdateUserRequest) returns (UpdateUserResponse) {}
    rpc Delete(DeleteUserRequest) returns (DeleteUserResponse) {}
    rpc Validate(ValidateUserRequest) returns (ValidateUserResponse) {}
    rpc FetchUsernames(FetchUsernamesRequest) returns (FetchUsernamesResponse) {}
}
